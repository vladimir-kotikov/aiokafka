from threading import Lock
from typing import Any, Callable, Set

from kafka.structs import BrokerMetadata as BrokerMetadata
from kafka.structs import PartitionMetadata as PartitionMetadata
from kafka.structs import TopicPartition as TopicPartition

class ClusterMetadata:
    pass
    # DEFAULT_CONFIG: Incomplete
    # need_all_topic_metadata: bool
    # unauthorized_topics: Incomplete
    # internal_topics: Incomplete
    # controller: Incomplete
    # config: Incomplete
    _lock: Lock
    _listeners: Set[Callable[["ClusterMetadata"], Any]]
    # def __init__(self, **configs) -> None: ...
    # def is_bootstrap(self, node_id): ...
    # def brokers(self): ...
    # def broker_metadata(self, broker_id): ...
    # def partitions_for_topic(self, topic): ...
    # def available_partitions_for_topic(self, topic): ...
    # def leader_for_partition(self, partition): ...
    # def partitions_for_broker(self, broker_id): ...
    # def coordinator_for_group(self, group): ...
    # def ttl(self): ...
    # def refresh_backoff(self): ...
    # def request_update(self): ...
    # def topics(self, exclude_internal_topics: bool = ...): ...
    # def failed_update(self, exception) -> None: ...
    # def update_metadata(self, metadata): ...
    # def add_listener(self, listener) -> None: ...
    # def remove_listener(self, listener) -> None: ...
    # def add_group_coordinator(self, group, response): ...
    # def with_partitions(self, partitions_to_add): ...
